package simpledb.execution;

import simpledb.storage.Field;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    private JoinPredicate joinPredicate;
    private OpIterator opIterator1;
    private OpIterator opIterator2;
    private TupleDesc newTupleDesc;
    private Tuple tempTuple1;

    public Join(JoinPredicate p, OpIterator child1, OpIterator child2){
        // some code goes here
        this.joinPredicate=p;
        this.opIterator1=child1;
        this.opIterator2=child2;
        this.newTupleDesc=this.getTupleDesc();
        try {
            this.opIterator1.open();
            this.tempTuple1 = this.opIterator1.next();
            this.opIterator1.close();
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return null;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return null;
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc temp1=this.opIterator1.getTupleDesc();
        TupleDesc temp2=this.opIterator2.getTupleDesc();
        return TupleDesc.merge(temp1, temp2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        this.opIterator1.open();
        this.opIterator2.open();
    }

    public void close() {
        // some code goes here
        super.close();
        this.opIterator1.close();
        this.opIterator2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.opIterator1.rewind();
        this.opIterator2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.(嵌套循环)
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * 注意，在本实现中，不会删除重复的列，既仅进行简单的列串联。若要实现重复列的删除，可以使用一个投影操作符
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        //此处使用嵌套循环实现
        Tuple tuple2;
        while(true){
            while (this.opIterator2.hasNext()){
                tuple2=this.opIterator2.next();
                if(this.joinPredicate.filter(this.tempTuple1, tuple2)){
                    return this.join(this.tempTuple1, tuple2);
                }else
                    continue;
            }
            if(this.opIterator1.hasNext())
                this.tempTuple1=this.opIterator1.next();
            else
                break;
            this.opIterator2.rewind();
        }
        return null;
    }
    protected Tuple join(Tuple t1, Tuple t2){
        TupleDesc td=this.getTupleDesc();
        Tuple result=new Tuple(td);
        int idx=0;
        Iterator<Field> iterator1=t1.fields();
        Iterator<Field> iterator2=t2.fields();
        while (iterator1.hasNext())
            result.setField(idx++, iterator1.next());
        while (iterator2.hasNext())
            result.setField(idx++, iterator2.next());
        return result;
    }
    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    }

}
